using NUnit.Framework;

using CSharpCAD;

namespace CSharpCADTests;

[TestFixture]
public class RoundedCylinderTests
{
    [SetUp]
    public void Setup()
    {
    }

    [Test]
    public void TestRoundedCylinderDefaults()
    {
        var obs = RoundedCylinder(new Opts());
        Assert.DoesNotThrow(() => obs.Validate());
        var pts = obs.ToPoints();

        Assert.AreEqual(pts.Count, 544);
    }


    [Test]
    public void TestRoundedCylinderOptions()
    {
        // test segments
        var obs = RoundedCylinder(new Opts { { "segments", 5 } });
        Assert.DoesNotThrow(() => obs.Validate());
        var pts = obs.ToPoints();
        var exp = new List<List<Vec3>> { };

        Assert.AreEqual(pts.Count, 15);

        // test center
        obs = RoundedCylinder(new Opts { { "segments", 5 }, { "center", (-5, -5, -5) } });
        Assert.DoesNotThrow(() => obs.Validate());
        pts = obs.ToPoints();
        exp = new List<List<Vec3>> {
          new List<Vec3> {new Vec3(-4.048943483704846, -4.6909830056250525, -5.8), new Vec3(-5, -4, -5.8),
            new Vec3(-5, -4, -4.2), new Vec3(-4.048943483704846, -4.6909830056250525, -4.2)},
          new List<Vec3> {new Vec3(-5, -4, -5.8), new Vec3(-4.048943483704846, -4.6909830056250525, -5.8), new Vec3(-5, -5, -6)},
          new List<Vec3> {new Vec3(-5, -5, -4), new Vec3(-4.048943483704846, -4.6909830056250525, -4.2), new Vec3(-5, -4, -4.2)},
          new List<Vec3> {new Vec3(-4.412214747707527, -5.8090169943749475, -5.8), new Vec3(-4.048943483704846, -4.6909830056250525, -5.8),
            new Vec3(-4.048943483704846, -4.6909830056250525, -4.2), new Vec3(-4.412214747707527, -5.8090169943749475, -4.2)},
          new List<Vec3> {new Vec3(-4.048943483704846, -4.6909830056250525, -5.8), new Vec3(-4.412214747707527, -5.8090169943749475, -5.8), new Vec3(-5, -5, -6)},
          new List<Vec3> {new Vec3(-5, -5, -4), new Vec3(-4.412214747707527, -5.8090169943749475, -4.2), new Vec3(-4.048943483704846, -4.6909830056250525, -4.2)},
          new List<Vec3> {new Vec3(-5.587785252292473, -5.8090169943749475, -5.8), new Vec3(-4.412214747707527, -5.8090169943749475, -5.8),
            new Vec3(-4.412214747707527, -5.8090169943749475, -4.2), new Vec3(-5.587785252292473, -5.8090169943749475, -4.2)},
          new List<Vec3> {new Vec3(-4.412214747707527, -5.8090169943749475, -5.8), new Vec3(-5.587785252292473, -5.8090169943749475, -5.8), new Vec3(-5, -5, -6)},
          new List<Vec3> {new Vec3(-5, -5, -4), new Vec3(-5.587785252292473, -5.8090169943749475, -4.2), new Vec3(-4.412214747707527, -5.8090169943749475, -4.2)},
          new List<Vec3> {new Vec3(-5.951056516295154, -4.6909830056250525, -5.8), new Vec3(-5.587785252292473, -5.8090169943749475, -5.8),
            new Vec3(-5.587785252292473, -5.8090169943749475, -4.2), new Vec3(-5.951056516295154, -4.6909830056250525, -4.2)},
          new List<Vec3> {new Vec3(-5.587785252292473, -5.8090169943749475, -5.8), new Vec3(-5.951056516295154, -4.6909830056250525, -5.8), new Vec3(-5, -5, -6)},
          new List<Vec3> {new Vec3(-5, -5, -4), new Vec3(-5.951056516295154, -4.6909830056250525, -4.2), new Vec3(-5.587785252292473, -5.8090169943749475, -4.2)},
          new List<Vec3> {new Vec3(-5, -4, -5.8), new Vec3(-5.951056516295154, -4.6909830056250525, -5.8),
            new Vec3(-5.951056516295154, -4.6909830056250525, -4.2), new Vec3(-5, -4, -4.2)},
          new List<Vec3> {new Vec3(-5.951056516295154, -4.6909830056250525, -5.8), new Vec3(-5, -4, -5.8), new Vec3(-5, -5, -6)},
          new List<Vec3> {new Vec3(-5, -5, -4), new Vec3(-5, -4, -4.2), new Vec3(-5.951056516295154, -4.6909830056250525, -4.2)}
        };

        Assert.AreEqual(pts.Count, 15);
        Assert.IsTrue(Helpers.CompareListOfListsNEVec3(pts, exp));

        // test height
        obs = RoundedCylinder(new Opts { { "segments", 5 }, { "height", 20 } });
        Assert.DoesNotThrow(() => obs.Validate());
        pts = obs.ToPoints();
        exp = new List<List<Vec3>> {
          new List<Vec3> {new Vec3(0.9510565162951535, 0.30901699437494745, -9.8), new Vec3(0, 1, -9.8),
            new Vec3(0, 1, 9.8), new Vec3(0.9510565162951535, 0.30901699437494745, 9.8)},
          new List<Vec3> {new Vec3(0, 1, -9.8), new Vec3(0.9510565162951535, 0.30901699437494745, -9.8), new Vec3(0, 6.123233995736766e-17, -10)},
          new List<Vec3> {new Vec3(0, 6.123233995736766e-17, 10), new Vec3(0.9510565162951535, 0.30901699437494745, 9.8), new Vec3(0, 1, 9.8)},
          new List<Vec3> {new Vec3(0.5877852522924732, -0.8090169943749473, -9.8), new Vec3(0.9510565162951535, 0.30901699437494745, -9.8),
            new Vec3(0.9510565162951535, 0.30901699437494745, 9.8), new Vec3(0.5877852522924732, -0.8090169943749473, 9.8)},
          new List<Vec3> {new Vec3(0.9510565162951535, 0.30901699437494745, -9.8), new Vec3(0.5877852522924732, -0.8090169943749473, -9.8), new Vec3(5.823541592445462e-17, 1.8921833652170753e-17, -10)},
          new List<Vec3> {new Vec3(5.823541592445462e-17, 1.8921833652170753e-17, 10), new Vec3(0.5877852522924732, -0.8090169943749473, 9.8), new Vec3(0.9510565162951535, 0.30901699437494745, 9.8)},
          new List<Vec3> {new Vec3(-0.587785252292473, -0.8090169943749475, -9.8), new Vec3(0.5877852522924732, -0.8090169943749473, -9.8),
            new Vec3(0.5877852522924732, -0.8090169943749473, 9.8), new Vec3(-0.587785252292473, -0.8090169943749475, 9.8)},
          new List<Vec3> {new Vec3(0.5877852522924732, -0.8090169943749473, -9.8), new Vec3(-0.587785252292473, -0.8090169943749475, -9.8), new Vec3(3.599146639029984e-17, -4.9538003630854574e-17, -10)},
          new List<Vec3> {new Vec3(3.599146639029984e-17, -4.9538003630854574e-17, 10), new Vec3(-0.587785252292473, -0.8090169943749475, 9.8), new Vec3(0.5877852522924732, -0.8090169943749473, 9.8)},
          new List<Vec3> {new Vec3(-0.9510565162951536, 0.30901699437494723, -9.8), new Vec3(-0.587785252292473, -0.8090169943749475, -9.8),
            new Vec3(-0.587785252292473, -0.8090169943749475, 9.8), new Vec3(-0.9510565162951536, 0.30901699437494723, 9.8)},
          new List<Vec3> {new Vec3(-0.587785252292473, -0.8090169943749475, -9.8), new Vec3(-0.9510565162951536, 0.30901699437494723, -9.8), new Vec3(-3.5991466390299825e-17, -4.953800363085458e-17, -10)},
          new List<Vec3> {new Vec3(-3.5991466390299825e-17, -4.953800363085458e-17, 10), new Vec3(-0.9510565162951536, 0.30901699437494723, 9.8), new Vec3(-0.587785252292473, -0.8090169943749475, 9.8)},
          new List<Vec3> {new Vec3(-2.4492935982947064e-16, 1, -9.8), new Vec3(-0.9510565162951536, 0.30901699437494723, -9.8),
            new Vec3(-0.9510565162951536, 0.30901699437494723, 9.8), new Vec3(-2.4492935982947064e-16, 1, 9.8)},
          new List<Vec3> {new Vec3(-0.9510565162951536, 0.30901699437494723, -9.8), new Vec3(-2.4492935982947064e-16, 1, -9.8), new Vec3(-5.823541592445463e-17, 1.8921833652170737e-17, -10)},
          new List<Vec3> {new Vec3(-5.823541592445463e-17, 1.8921833652170737e-17, 10), new Vec3(-2.4492935982947064e-16, 1, 9.8), new Vec3(-0.9510565162951536, 0.30901699437494723, 9.8)}
        };

        Assert.AreEqual(pts.Count, 15);
        Assert.IsTrue(Helpers.CompareListOfListsNEVec3(pts, exp));

        // test radius
        obs = RoundedCylinder(new Opts { { "segments", 5 }, { "radius", 10 } });
        Assert.DoesNotThrow(() => obs.Validate());
        pts = obs.ToPoints();
        exp = new List<List<Vec3>> {
          new List<Vec3> {new Vec3(9.510565162951535, 3.0901699437494745, -0.8), new Vec3(0, 10, -0.8),
            new Vec3(0, 10, 0.8), new Vec3(9.510565162951535, 3.0901699437494745, 0.8)},
          new List<Vec3> {new Vec3(0, 10, -0.8), new Vec3(9.510565162951535, 3.0901699437494745, -0.8), new Vec3(0, 6.123233995736766e-16, -1)},
          new List<Vec3> {new Vec3(0, 6.123233995736766e-16, 1), new Vec3(9.510565162951535, 3.0901699437494745, 0.8), new Vec3(0, 10, 0.8)},
          new List<Vec3> {new Vec3(5.877852522924733, -8.090169943749473, -0.8), new Vec3(9.510565162951535, 3.0901699437494745, -0.8),
            new Vec3(9.510565162951535, 3.0901699437494745, 0.8), new Vec3(5.877852522924733, -8.090169943749473, 0.8)},
          new List<Vec3> {new Vec3(9.510565162951535, 3.0901699437494745, -0.8), new Vec3(5.877852522924733, -8.090169943749473, -0.8), new Vec3(5.823541592445461e-16, 1.8921833652170753e-16, -1)},
          new List<Vec3> {new Vec3(5.823541592445461e-16, 1.8921833652170753e-16, 1), new Vec3(5.877852522924733, -8.090169943749473, 0.8), new Vec3(9.510565162951535, 3.0901699437494745, 0.8)},
          new List<Vec3> {new Vec3(-5.87785252292473, -8.090169943749475, -0.8), new Vec3(5.877852522924733, -8.090169943749473, -0.8),
            new Vec3(5.877852522924733, -8.090169943749473, 0.8), new Vec3(-5.87785252292473, -8.090169943749475, 0.8)},
          new List<Vec3> {new Vec3(5.877852522924733, -8.090169943749473, -0.8), new Vec3(-5.87785252292473, -8.090169943749475, -0.8), new Vec3(3.599146639029984e-16, -4.953800363085457e-16, -1)},
          new List<Vec3> {new Vec3(3.599146639029984e-16, -4.953800363085457e-16, 1), new Vec3(-5.87785252292473, -8.090169943749475, 0.8), new Vec3(5.877852522924733, -8.090169943749473, 0.8)},
          new List<Vec3> {new Vec3(-9.510565162951536, 3.0901699437494723, -0.8), new Vec3(-5.87785252292473, -8.090169943749475, -0.8),
            new Vec3(-5.87785252292473, -8.090169943749475, 0.8), new Vec3(-9.510565162951536, 3.0901699437494723, 0.8)},
          new List<Vec3> {new Vec3(-5.87785252292473, -8.090169943749475, -0.8), new Vec3(-9.510565162951536, 3.0901699437494723, -0.8), new Vec3(-3.5991466390299825e-16, -4.953800363085459e-16, -1)},
          new List<Vec3> {new Vec3(-3.5991466390299825e-16, -4.953800363085459e-16, 1), new Vec3(-9.510565162951536, 3.0901699437494723, 0.8), new Vec3(-5.87785252292473, -8.090169943749475, 0.8)},
          new List<Vec3> {new Vec3(-2.4492935982947065e-15, 10, -0.8), new Vec3(-9.510565162951536, 3.0901699437494723, -0.8),
            new Vec3(-9.510565162951536, 3.0901699437494723, 0.8), new Vec3(-2.4492935982947065e-15, 10, 0.8)},
          new List<Vec3> {new Vec3(-9.510565162951536, 3.0901699437494723, -0.8), new Vec3(-2.4492935982947065e-15, 10, -0.8), new Vec3(-5.823541592445462e-16, 1.8921833652170739e-16, -1)},
          new List<Vec3> {new Vec3(-5.823541592445462e-16, 1.8921833652170739e-16, 1), new Vec3(-2.4492935982947065e-15, 10, 0.8), new Vec3(-9.510565162951536, 3.0901699437494723, 0.8)}
        };

        Assert.AreEqual(pts.Count, 15);
        Assert.IsTrue(Helpers.CompareListOfListsNEVec3(pts, exp));

        // test round radius
        obs = RoundedCylinder(new Opts { { "segments", 5 }, { "height", 20 }, { "radius", 5 }, { "roundRadius", 2 } });
        Assert.DoesNotThrow(() => obs.Validate());
        pts = obs.ToPoints();
        exp = new List<List<Vec3>> {
          new List<Vec3> {new Vec3(4.755282581475767, 1.5450849718747373, -8), new Vec3(0, 5, -8),
            new Vec3(0, 5, 8), new Vec3(4.755282581475767, 1.5450849718747373, 8)},
          new List<Vec3> {new Vec3(0, 5, -8), new Vec3(4.755282581475767, 1.5450849718747373, -8), new Vec3(0, 3.061616997868383e-16, -10)},
          new List<Vec3> {new Vec3(0, 3.061616997868383e-16, 10), new Vec3(4.755282581475767, 1.5450849718747373, 8), new Vec3(0, 5, 8)},
          new List<Vec3> {new Vec3(2.9389262614623664, -4.045084971874736, -8), new Vec3(4.755282581475767, 1.5450849718747373, -8),
            new Vec3(4.755282581475767, 1.5450849718747373, 8), new Vec3(2.9389262614623664, -4.045084971874736, 8)},
          new List<Vec3> {new Vec3(4.755282581475767, 1.5450849718747373, -8), new Vec3(2.9389262614623664, -4.045084971874736, -8), new Vec3(2.9117707962227305e-16, 9.460916826085377e-17, -10)},
          new List<Vec3> {new Vec3(2.9117707962227305e-16, 9.460916826085377e-17, 10), new Vec3(2.9389262614623664, -4.045084971874736, 8), new Vec3(4.755282581475767, 1.5450849718747373, 8)},
          new List<Vec3> {new Vec3(-2.938926261462365, -4.045084971874737, -8), new Vec3(2.9389262614623664, -4.045084971874736, -8),
            new Vec3(2.9389262614623664, -4.045084971874736, 8), new Vec3(-2.938926261462365, -4.045084971874737, 8)},
          new List<Vec3> {new Vec3(2.9389262614623664, -4.045084971874736, -8), new Vec3(-2.938926261462365, -4.045084971874737, -8), new Vec3(1.799573319514992e-16, -2.4769001815427284e-16, -10)},
          new List<Vec3> {new Vec3(1.799573319514992e-16, -2.4769001815427284e-16, 10), new Vec3(-2.938926261462365, -4.045084971874737, 8), new Vec3(2.9389262614623664, -4.045084971874736, 8)},
          new List<Vec3> {new Vec3(-4.755282581475768, 1.5450849718747361, -8), new Vec3(-2.938926261462365, -4.045084971874737, -8),
            new Vec3(-2.938926261462365, -4.045084971874737, 8), new Vec3(-4.755282581475768, 1.5450849718747361, 8)},
          new List<Vec3> {new Vec3(-2.938926261462365, -4.045084971874737, -8), new Vec3(-4.755282581475768, 1.5450849718747361, -8), new Vec3(-1.7995733195149913e-16, -2.4769001815427294e-16, -10)},
          new List<Vec3> {new Vec3(-1.7995733195149913e-16, -2.4769001815427294e-16, 10), new Vec3(-4.755282581475768, 1.5450849718747361, 8), new Vec3(-2.938926261462365, -4.045084971874737, 8)},
          new List<Vec3> {new Vec3(-1.2246467991473533e-15, 5, -8), new Vec3(-4.755282581475768, 1.5450849718747361, -8),
            new Vec3(-4.755282581475768, 1.5450849718747361, 8), new Vec3(-1.2246467991473533e-15, 5, 8)},
          new List<Vec3> {new Vec3(-4.755282581475768, 1.5450849718747361, -8), new Vec3(-1.2246467991473533e-15, 5, -8), new Vec3(-2.911770796222731e-16, 9.460916826085369e-17, -10)},
          new List<Vec3> {new Vec3(-2.911770796222731e-16, 9.460916826085369e-17, 10), new Vec3(-1.2246467991473533e-15, 5, 8), new Vec3(-4.755282581475768, 1.5450849718747361, 8)}
        };

        Assert.AreEqual(pts.Count, 15);
        Assert.IsTrue(Helpers.CompareListOfListsNEVec3(pts, exp));
    }

}
